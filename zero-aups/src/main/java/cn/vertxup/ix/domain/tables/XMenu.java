/*
 * This file is generated by jOOQ.
*/
package cn.vertxup.ix.domain.tables;


import cn.vertxup.ix.domain.DbOriginX;
import cn.vertxup.ix.domain.Indexes;
import cn.vertxup.ix.domain.Keys;
import cn.vertxup.ix.domain.tables.records.XMenuRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.8"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class XMenu extends TableImpl<XMenuRecord> {

    private static final long serialVersionUID = -767627379;

    /**
     * The reference instance of <code>DB_ORIGIN_X.X_MENU</code>
     */
    public static final XMenu X_MENU = new XMenu();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<XMenuRecord> getRecordType() {
        return XMenuRecord.class;
    }

    /**
     * The column <code>DB_ORIGIN_X.X_MENU.KEY</code>. 「key」- 菜单主键
     */
    public final TableField<XMenuRecord, String> KEY = createField("KEY", org.jooq.impl.SQLDataType.VARCHAR(36).nullable(false), this, "「key」- 菜单主键");

    /**
     * The column <code>DB_ORIGIN_X.X_MENU.NAME</code>. 「name」- 菜单名称
     */
    public final TableField<XMenuRecord, String> NAME = createField("NAME", org.jooq.impl.SQLDataType.VARCHAR(255), this, "「name」- 菜单名称");

    /**
     * The column <code>DB_ORIGIN_X.X_MENU.ICON</code>. 「icon」- 菜单使用的icon
     */
    public final TableField<XMenuRecord, String> ICON = createField("ICON", org.jooq.impl.SQLDataType.VARCHAR(255), this, "「icon」- 菜单使用的icon");

    /**
     * The column <code>DB_ORIGIN_X.X_MENU.TEXT</code>. 「text」- 菜单显示文字
     */
    public final TableField<XMenuRecord, String> TEXT = createField("TEXT", org.jooq.impl.SQLDataType.VARCHAR(255), this, "「text」- 菜单显示文字");

    /**
     * The column <code>DB_ORIGIN_X.X_MENU.URI</code>. 「uri」- 菜单地址（不包含应用的path）
     */
    public final TableField<XMenuRecord, String> URI = createField("URI", org.jooq.impl.SQLDataType.VARCHAR(255), this, "「uri」- 菜单地址（不包含应用的path）");

    /**
     * The column <code>DB_ORIGIN_X.X_MENU.TYPE</code>. 「type」- 菜单类型
     */
    public final TableField<XMenuRecord, String> TYPE = createField("TYPE", org.jooq.impl.SQLDataType.VARCHAR(255), this, "「type」- 菜单类型");

    /**
     * The column <code>DB_ORIGIN_X.X_MENU.ORDER</code>. 「order」- 菜单排序
     */
    public final TableField<XMenuRecord, Long> ORDER = createField("ORDER", org.jooq.impl.SQLDataType.BIGINT, this, "「order」- 菜单排序");

    /**
     * The column <code>DB_ORIGIN_X.X_MENU.LEVEL</code>. 「level」- 菜单层级
     */
    public final TableField<XMenuRecord, Long> LEVEL = createField("LEVEL", org.jooq.impl.SQLDataType.BIGINT, this, "「level」- 菜单层级");

    /**
     * The column <code>DB_ORIGIN_X.X_MENU.PARENT_ID</code>. 「parentId」- 菜单父ID
     */
    public final TableField<XMenuRecord, String> PARENT_ID = createField("PARENT_ID", org.jooq.impl.SQLDataType.VARCHAR(36), this, "「parentId」- 菜单父ID");

    /**
     * The column <code>DB_ORIGIN_X.X_MENU.APP_ID</code>. 「appId」- 应用程序ID
     */
    public final TableField<XMenuRecord, String> APP_ID = createField("APP_ID", org.jooq.impl.SQLDataType.VARCHAR(36), this, "「appId」- 应用程序ID");

    /**
     * The column <code>DB_ORIGIN_X.X_MENU.ENGINE</code>. 「engine」- 是否执行引擎渲染（引擎渲染使用动态页面流程，自动追加路由）
     */
    public final TableField<XMenuRecord, Boolean> ENGINE = createField("ENGINE", org.jooq.impl.SQLDataType.BIT, this, "「engine」- 是否执行引擎渲染（引擎渲染使用动态页面流程，自动追加路由）");

    /**
     * The column <code>DB_ORIGIN_X.X_MENU.ACTIVE</code>. 「active」- 是否启用
     */
    public final TableField<XMenuRecord, Boolean> ACTIVE = createField("ACTIVE", org.jooq.impl.SQLDataType.BIT, this, "「active」- 是否启用");

    /**
     * The column <code>DB_ORIGIN_X.X_MENU.LANGUAGE</code>. 「language」- 使用的语言
     */
    public final TableField<XMenuRecord, String> LANGUAGE = createField("LANGUAGE", org.jooq.impl.SQLDataType.VARCHAR(10), this, "「language」- 使用的语言");

    /**
     * The column <code>DB_ORIGIN_X.X_MENU.METADATA</code>. 「metadata」- 附加配置数据
     */
    public final TableField<XMenuRecord, String> METADATA = createField("METADATA", org.jooq.impl.SQLDataType.CLOB, this, "「metadata」- 附加配置数据");

    /**
     * Create a <code>DB_ORIGIN_X.X_MENU</code> table reference
     */
    public XMenu() {
        this(DSL.name("X_MENU"), null);
    }

    /**
     * Create an aliased <code>DB_ORIGIN_X.X_MENU</code> table reference
     */
    public XMenu(String alias) {
        this(DSL.name(alias), X_MENU);
    }

    /**
     * Create an aliased <code>DB_ORIGIN_X.X_MENU</code> table reference
     */
    public XMenu(Name alias) {
        this(alias, X_MENU);
    }

    private XMenu(Name alias, Table<XMenuRecord> aliased) {
        this(alias, aliased, null);
    }

    private XMenu(Name alias, Table<XMenuRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DbOriginX.DB_ORIGIN_X;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.X_MENU_NAME, Indexes.X_MENU_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<XMenuRecord> getPrimaryKey() {
        return Keys.KEY_X_MENU_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<XMenuRecord>> getKeys() {
        return Arrays.<UniqueKey<XMenuRecord>>asList(Keys.KEY_X_MENU_PRIMARY, Keys.KEY_X_MENU_NAME);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public XMenu as(String alias) {
        return new XMenu(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public XMenu as(Name alias) {
        return new XMenu(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public XMenu rename(String name) {
        return new XMenu(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public XMenu rename(Name name) {
        return new XMenu(name, null);
    }
}
