/*
 * This file is generated by jOOQ.
*/
package cn.vertxup.ix.domain.tables;


import cn.vertxup.ix.domain.DbOriginX;
import cn.vertxup.ix.domain.Indexes;
import cn.vertxup.ix.domain.Keys;
import cn.vertxup.ix.domain.tables.records.XModuleRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.8"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class XModule extends TableImpl<XModuleRecord> {

    private static final long serialVersionUID = 2064114801;

    /**
     * The reference instance of <code>DB_ORIGIN_X.X_MODULE</code>
     */
    public static final XModule X_MODULE = new XModule();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<XModuleRecord> getRecordType() {
        return XModuleRecord.class;
    }

    /**
     * The column <code>DB_ORIGIN_X.X_MODULE.KEY</code>. 「key」- 模块唯一主键
     */
    public final TableField<XModuleRecord, String> KEY = createField("KEY", org.jooq.impl.SQLDataType.VARCHAR(36).nullable(false), this, "「key」- 模块唯一主键");

    /**
     * The column <code>DB_ORIGIN_X.X_MODULE.NAME</code>. 「name」- 模块名称
     */
    public final TableField<XModuleRecord, String> NAME = createField("NAME", org.jooq.impl.SQLDataType.VARCHAR(255), this, "「name」- 模块名称");

    /**
     * The column <code>DB_ORIGIN_X.X_MODULE.CODE</code>. 「code」- 应用程序编码
     */
    public final TableField<XModuleRecord, String> CODE = createField("CODE", org.jooq.impl.SQLDataType.VARCHAR(36), this, "「code」- 应用程序编码");

    /**
     * The column <code>DB_ORIGIN_X.X_MODULE.CAT</code>. 「cat」- 模块类型
     */
    public final TableField<XModuleRecord, String> CAT = createField("CAT", org.jooq.impl.SQLDataType.VARCHAR(20), this, "「cat」- 模块类型");

    /**
     * The column <code>DB_ORIGIN_X.X_MODULE.URL_ENTRY</code>. 「urlEntry」— 模块入口地址
     */
    public final TableField<XModuleRecord, String> URL_ENTRY = createField("URL_ENTRY", org.jooq.impl.SQLDataType.VARCHAR(255), this, "「urlEntry」— 模块入口地址");

    /**
     * The column <code>DB_ORIGIN_X.X_MODULE.APP_ID</code>. 「appId」- 关联的应用程序ID
     */
    public final TableField<XModuleRecord, String> APP_ID = createField("APP_ID", org.jooq.impl.SQLDataType.VARCHAR(255), this, "「appId」- 关联的应用程序ID");

    /**
     * The column <code>DB_ORIGIN_X.X_MODULE.MODEL_ID</code>. 「modelId」- 当前模块关联的主模型ID
     */
    public final TableField<XModuleRecord, String> MODEL_ID = createField("MODEL_ID", org.jooq.impl.SQLDataType.VARCHAR(36), this, "「modelId」- 当前模块关联的主模型ID");

    /**
     * The column <code>DB_ORIGIN_X.X_MODULE.ACTIVE</code>. 「active」- 是否启用
     */
    public final TableField<XModuleRecord, Boolean> ACTIVE = createField("ACTIVE", org.jooq.impl.SQLDataType.BIT, this, "「active」- 是否启用");

    /**
     * The column <code>DB_ORIGIN_X.X_MODULE.METADATA</code>. 「metadata」- 附加配置数据
     */
    public final TableField<XModuleRecord, String> METADATA = createField("METADATA", org.jooq.impl.SQLDataType.CLOB, this, "「metadata」- 附加配置数据");

    /**
     * The column <code>DB_ORIGIN_X.X_MODULE.LANGUAGE</code>. 「language」- 使用的语言
     */
    public final TableField<XModuleRecord, String> LANGUAGE = createField("LANGUAGE", org.jooq.impl.SQLDataType.VARCHAR(10), this, "「language」- 使用的语言");

    /**
     * Create a <code>DB_ORIGIN_X.X_MODULE</code> table reference
     */
    public XModule() {
        this(DSL.name("X_MODULE"), null);
    }

    /**
     * Create an aliased <code>DB_ORIGIN_X.X_MODULE</code> table reference
     */
    public XModule(String alias) {
        this(DSL.name(alias), X_MODULE);
    }

    /**
     * Create an aliased <code>DB_ORIGIN_X.X_MODULE</code> table reference
     */
    public XModule(Name alias) {
        this(alias, X_MODULE);
    }

    private XModule(Name alias, Table<XModuleRecord> aliased) {
        this(alias, aliased, null);
    }

    private XModule(Name alias, Table<XModuleRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DbOriginX.DB_ORIGIN_X;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.X_MODULE_PRIMARY, Indexes.X_MODULE_URL_ENTRY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<XModuleRecord> getPrimaryKey() {
        return Keys.KEY_X_MODULE_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<XModuleRecord>> getKeys() {
        return Arrays.<UniqueKey<XModuleRecord>>asList(Keys.KEY_X_MODULE_PRIMARY, Keys.KEY_X_MODULE_URL_ENTRY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public XModule as(String alias) {
        return new XModule(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public XModule as(Name alias) {
        return new XModule(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public XModule rename(String name) {
        return new XModule(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public XModule rename(Name name) {
        return new XModule(name, null);
    }
}
