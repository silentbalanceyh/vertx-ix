/*
 * This file is generated by jOOQ.
*/
package cn.vertxup.ix.domain.tables.daos;


import cn.vertxup.ix.domain.tables.SUser;
import cn.vertxup.ix.domain.tables.records.SUserRecord;

import io.github.jklingsporn.vertx.jooq.future.VertxDAO;

import java.util.List;

import javax.annotation.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


import java.util.concurrent.CompletableFuture;
import io.github.jklingsporn.vertx.jooq.future.util.FutureTool;
/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.8"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SUserDao extends DAOImpl<SUserRecord, cn.vertxup.ix.domain.tables.pojos.SUser, String> implements VertxDAO<cn.vertxup.ix.domain.tables.records.SUserRecord,cn.vertxup.ix.domain.tables.pojos.SUser,java.lang.String> {

    /**
     * Create a new SUserDao without any configuration
     */
    public SUserDao() {
        super(SUser.S_USER, cn.vertxup.ix.domain.tables.pojos.SUser.class);
    }

    /**
     * Create a new SUserDao with an attached configuration
     */
    public SUserDao(Configuration configuration) {
        super(SUser.S_USER, cn.vertxup.ix.domain.tables.pojos.SUser.class, configuration);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected String getId(cn.vertxup.ix.domain.tables.pojos.SUser object) {
        return object.getKey();
    }

    /**
     * Fetch records that have <code>KEY IN (values)</code>
     */
    public List<cn.vertxup.ix.domain.tables.pojos.SUser> fetchByKey(String... values) {
        return fetch(SUser.S_USER.KEY, values);
    }

    /**
     * Fetch a unique record that has <code>KEY = value</code>
     */
    public cn.vertxup.ix.domain.tables.pojos.SUser fetchOneByKey(String value) {
        return fetchOne(SUser.S_USER.KEY, value);
    }

    /**
     * Fetch records that have <code>USERNAME IN (values)</code>
     */
    public List<cn.vertxup.ix.domain.tables.pojos.SUser> fetchByUsername(String... values) {
        return fetch(SUser.S_USER.USERNAME, values);
    }

    /**
     * Fetch a unique record that has <code>USERNAME = value</code>
     */
    public cn.vertxup.ix.domain.tables.pojos.SUser fetchOneByUsername(String value) {
        return fetchOne(SUser.S_USER.USERNAME, value);
    }

    /**
     * Fetch records that have <code>REALNAME IN (values)</code>
     */
    public List<cn.vertxup.ix.domain.tables.pojos.SUser> fetchByRealname(String... values) {
        return fetch(SUser.S_USER.REALNAME, values);
    }

    /**
     * Fetch records that have <code>ALIAS IN (values)</code>
     */
    public List<cn.vertxup.ix.domain.tables.pojos.SUser> fetchByAlias(String... values) {
        return fetch(SUser.S_USER.ALIAS, values);
    }

    /**
     * Fetch records that have <code>MOBILE IN (values)</code>
     */
    public List<cn.vertxup.ix.domain.tables.pojos.SUser> fetchByMobile(String... values) {
        return fetch(SUser.S_USER.MOBILE, values);
    }

    /**
     * Fetch a unique record that has <code>MOBILE = value</code>
     */
    public cn.vertxup.ix.domain.tables.pojos.SUser fetchOneByMobile(String value) {
        return fetchOne(SUser.S_USER.MOBILE, value);
    }

    /**
     * Fetch records that have <code>EMAIL IN (values)</code>
     */
    public List<cn.vertxup.ix.domain.tables.pojos.SUser> fetchByEmail(String... values) {
        return fetch(SUser.S_USER.EMAIL, values);
    }

    /**
     * Fetch a unique record that has <code>EMAIL = value</code>
     */
    public cn.vertxup.ix.domain.tables.pojos.SUser fetchOneByEmail(String value) {
        return fetchOne(SUser.S_USER.EMAIL, value);
    }

    /**
     * Fetch records that have <code>PASSWORD IN (values)</code>
     */
    public List<cn.vertxup.ix.domain.tables.pojos.SUser> fetchByPassword(String... values) {
        return fetch(SUser.S_USER.PASSWORD, values);
    }

    /**
     * Fetch records that have <code>CATEGORY IN (values)</code>
     */
    public List<cn.vertxup.ix.domain.tables.pojos.SUser> fetchByCategory(String... values) {
        return fetch(SUser.S_USER.CATEGORY, values);
    }

    /**
     * Fetch records that have <code>APP_KEY IN (values)</code>
     */
    public List<cn.vertxup.ix.domain.tables.pojos.SUser> fetchByAppKey(String... values) {
        return fetch(SUser.S_USER.APP_KEY, values);
    }

    /**
     * Fetch records that have <code>SECRET IN (values)</code>
     */
    public List<cn.vertxup.ix.domain.tables.pojos.SUser> fetchBySecret(String... values) {
        return fetch(SUser.S_USER.SECRET, values);
    }

    /**
     * Fetch a unique record that has <code>SECRET = value</code>
     */
    public cn.vertxup.ix.domain.tables.pojos.SUser fetchOneBySecret(String value) {
        return fetchOne(SUser.S_USER.SECRET, value);
    }

    /**
     * Fetch records that have <code>MODEL_ID IN (values)</code>
     */
    public List<cn.vertxup.ix.domain.tables.pojos.SUser> fetchByModelId(String... values) {
        return fetch(SUser.S_USER.MODEL_ID, values);
    }

    /**
     * Fetch records that have <code>MODEL_KEY IN (values)</code>
     */
    public List<cn.vertxup.ix.domain.tables.pojos.SUser> fetchByModelKey(String... values) {
        return fetch(SUser.S_USER.MODEL_KEY, values);
    }

    /**
     * Fetch records that have <code>LANGUAGE IN (values)</code>
     */
    public List<cn.vertxup.ix.domain.tables.pojos.SUser> fetchByLanguage(String... values) {
        return fetch(SUser.S_USER.LANGUAGE, values);
    }

    /**
     * Fetch records that have <code>ACTIVE IN (values)</code>
     */
    public List<cn.vertxup.ix.domain.tables.pojos.SUser> fetchByActive(Boolean... values) {
        return fetch(SUser.S_USER.ACTIVE, values);
    }

    /**
     * Fetch records that have <code>METADATA IN (values)</code>
     */
    public List<cn.vertxup.ix.domain.tables.pojos.SUser> fetchByMetadata(String... values) {
        return fetch(SUser.S_USER.METADATA, values);
    }

    /**
     * Fetch records that have <code>KEY IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.ix.domain.tables.pojos.SUser>> fetchByKeyAsync(List<String> values) {
        return fetchAsync(SUser.S_USER.KEY,values);
    }

    /**
     * Fetch a unique record that has <code>KEY = value</code> asynchronously
     */
    public CompletableFuture<cn.vertxup.ix.domain.tables.pojos.SUser> fetchOneByKeyAsync(String value) {
        return FutureTool.executeBlocking(h->h.complete(fetchOneByKey(value)),vertx());
    }

    /**
     * Fetch records that have <code>USERNAME IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.ix.domain.tables.pojos.SUser>> fetchByUsernameAsync(List<String> values) {
        return fetchAsync(SUser.S_USER.USERNAME,values);
    }

    /**
     * Fetch a unique record that has <code>USERNAME = value</code> asynchronously
     */
    public CompletableFuture<cn.vertxup.ix.domain.tables.pojos.SUser> fetchOneByUsernameAsync(String value) {
        return FutureTool.executeBlocking(h->h.complete(fetchOneByUsername(value)),vertx());
    }

    /**
     * Fetch records that have <code>REALNAME IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.ix.domain.tables.pojos.SUser>> fetchByRealnameAsync(List<String> values) {
        return fetchAsync(SUser.S_USER.REALNAME,values);
    }

    /**
     * Fetch records that have <code>ALIAS IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.ix.domain.tables.pojos.SUser>> fetchByAliasAsync(List<String> values) {
        return fetchAsync(SUser.S_USER.ALIAS,values);
    }

    /**
     * Fetch records that have <code>MOBILE IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.ix.domain.tables.pojos.SUser>> fetchByMobileAsync(List<String> values) {
        return fetchAsync(SUser.S_USER.MOBILE,values);
    }

    /**
     * Fetch a unique record that has <code>MOBILE = value</code> asynchronously
     */
    public CompletableFuture<cn.vertxup.ix.domain.tables.pojos.SUser> fetchOneByMobileAsync(String value) {
        return FutureTool.executeBlocking(h->h.complete(fetchOneByMobile(value)),vertx());
    }

    /**
     * Fetch records that have <code>EMAIL IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.ix.domain.tables.pojos.SUser>> fetchByEmailAsync(List<String> values) {
        return fetchAsync(SUser.S_USER.EMAIL,values);
    }

    /**
     * Fetch a unique record that has <code>EMAIL = value</code> asynchronously
     */
    public CompletableFuture<cn.vertxup.ix.domain.tables.pojos.SUser> fetchOneByEmailAsync(String value) {
        return FutureTool.executeBlocking(h->h.complete(fetchOneByEmail(value)),vertx());
    }

    /**
     * Fetch records that have <code>PASSWORD IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.ix.domain.tables.pojos.SUser>> fetchByPasswordAsync(List<String> values) {
        return fetchAsync(SUser.S_USER.PASSWORD,values);
    }

    /**
     * Fetch records that have <code>CATEGORY IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.ix.domain.tables.pojos.SUser>> fetchByCategoryAsync(List<String> values) {
        return fetchAsync(SUser.S_USER.CATEGORY,values);
    }

    /**
     * Fetch records that have <code>APP_KEY IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.ix.domain.tables.pojos.SUser>> fetchByAppKeyAsync(List<String> values) {
        return fetchAsync(SUser.S_USER.APP_KEY,values);
    }

    /**
     * Fetch records that have <code>SECRET IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.ix.domain.tables.pojos.SUser>> fetchBySecretAsync(List<String> values) {
        return fetchAsync(SUser.S_USER.SECRET,values);
    }

    /**
     * Fetch a unique record that has <code>SECRET = value</code> asynchronously
     */
    public CompletableFuture<cn.vertxup.ix.domain.tables.pojos.SUser> fetchOneBySecretAsync(String value) {
        return FutureTool.executeBlocking(h->h.complete(fetchOneBySecret(value)),vertx());
    }

    /**
     * Fetch records that have <code>MODEL_ID IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.ix.domain.tables.pojos.SUser>> fetchByModelIdAsync(List<String> values) {
        return fetchAsync(SUser.S_USER.MODEL_ID,values);
    }

    /**
     * Fetch records that have <code>MODEL_KEY IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.ix.domain.tables.pojos.SUser>> fetchByModelKeyAsync(List<String> values) {
        return fetchAsync(SUser.S_USER.MODEL_KEY,values);
    }

    /**
     * Fetch records that have <code>LANGUAGE IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.ix.domain.tables.pojos.SUser>> fetchByLanguageAsync(List<String> values) {
        return fetchAsync(SUser.S_USER.LANGUAGE,values);
    }

    /**
     * Fetch records that have <code>ACTIVE IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.ix.domain.tables.pojos.SUser>> fetchByActiveAsync(List<Boolean> values) {
        return fetchAsync(SUser.S_USER.ACTIVE,values);
    }

    /**
     * Fetch records that have <code>METADATA IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.ix.domain.tables.pojos.SUser>> fetchByMetadataAsync(List<String> values) {
        return fetchAsync(SUser.S_USER.METADATA,values);
    }

    private io.vertx.core.Vertx vertx;

    @Override
    public void setVertx(io.vertx.core.Vertx vertx) {
        this.vertx = vertx;
    }

    @Override
    public io.vertx.core.Vertx vertx() {
        return this.vertx;
    }

}
