/*
 * This file is generated by jOOQ.
*/
package cn.vertxup.ix.domain.tables;


import cn.vertxup.ix.domain.DbOriginX;
import cn.vertxup.ix.domain.Indexes;
import cn.vertxup.ix.domain.Keys;
import cn.vertxup.ix.domain.tables.records.SResourceRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.8"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SResource extends TableImpl<SResourceRecord> {

    private static final long serialVersionUID = -1497515252;

    /**
     * The reference instance of <code>DB_ORIGIN_X.S_RESOURCE</code>
     */
    public static final SResource S_RESOURCE = new SResource();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SResourceRecord> getRecordType() {
        return SResourceRecord.class;
    }

    /**
     * The column <code>DB_ORIGIN_X.S_RESOURCE.KEY</code>. 「key」- 资源对应的ID
     */
    public final TableField<SResourceRecord, String> KEY = createField("KEY", org.jooq.impl.SQLDataType.VARCHAR(36).nullable(false), this, "「key」- 资源对应的ID");

    /**
     * The column <code>DB_ORIGIN_X.S_RESOURCE.MODEL_ID</code>. 「modelId」- 资源对应的模型identifier
     */
    public final TableField<SResourceRecord, String> MODEL_ID = createField("MODEL_ID", org.jooq.impl.SQLDataType.VARCHAR(255), this, "「modelId」- 资源对应的模型identifier");

    /**
     * The column <code>DB_ORIGIN_X.S_RESOURCE.MODEL_KEY</code>. 「modelKey」- 资源对应的单条记录ID
     */
    public final TableField<SResourceRecord, String> MODEL_KEY = createField("MODEL_KEY", org.jooq.impl.SQLDataType.VARCHAR(36), this, "「modelKey」- 资源对应的单条记录ID");

    /**
     * The column <code>DB_ORIGIN_X.S_RESOURCE.CODE</code>. 「code」- 资源编号
     */
    public final TableField<SResourceRecord, String> CODE = createField("CODE", org.jooq.impl.SQLDataType.VARCHAR(256), this, "「code」- 资源编号");

    /**
     * The column <code>DB_ORIGIN_X.S_RESOURCE.CATEGORY</code>. 「category」- 资源分类
     */
    public final TableField<SResourceRecord, String> CATEGORY = createField("CATEGORY", org.jooq.impl.SQLDataType.VARCHAR(36), this, "「category」- 资源分类");

    /**
     * The column <code>DB_ORIGIN_X.S_RESOURCE.PROJECTION</code>. 「projection」- 该资源的列定义
     */
    public final TableField<SResourceRecord, String> PROJECTION = createField("PROJECTION", org.jooq.impl.SQLDataType.CLOB, this, "「projection」- 该资源的列定义");

    /**
     * The column <code>DB_ORIGIN_X.S_RESOURCE.QUERY</code>. 「query」- 该资源的行查询
     */
    public final TableField<SResourceRecord, String> QUERY = createField("QUERY", org.jooq.impl.SQLDataType.CLOB, this, "「query」- 该资源的行查询");

    /**
     * The column <code>DB_ORIGIN_X.S_RESOURCE.LEVEL</code>. 「level」- 资源需求级别
     */
    public final TableField<SResourceRecord, Integer> LEVEL = createField("LEVEL", org.jooq.impl.SQLDataType.INTEGER, this, "「level」- 资源需求级别");

    /**
     * The column <code>DB_ORIGIN_X.S_RESOURCE.EXPIRED</code>. 「expired」- 资源过期时间（动态授权）
     */
    public final TableField<SResourceRecord, LocalDateTime> EXPIRED = createField("EXPIRED", org.jooq.impl.SQLDataType.LOCALDATETIME, this, "「expired」- 资源过期时间（动态授权）");

    /**
     * The column <code>DB_ORIGIN_X.S_RESOURCE.API_KEY</code>. 「apiKey」- 访问该资源的入口API（一对一绑定）
     */
    public final TableField<SResourceRecord, String> API_KEY = createField("API_KEY", org.jooq.impl.SQLDataType.VARCHAR(36), this, "「apiKey」- 访问该资源的入口API（一对一绑定）");

    /**
     * The column <code>DB_ORIGIN_X.S_RESOURCE.TYPE</code>. 「type」- 该资源类型：USER / ROLE / UNIFORM
     */
    public final TableField<SResourceRecord, String> TYPE = createField("TYPE", org.jooq.impl.SQLDataType.VARCHAR(32), this, "「type」- 该资源类型：USER / ROLE / UNIFORM");

    /**
     * The column <code>DB_ORIGIN_X.S_RESOURCE.APP_KEY</code>. 「appKey」- 所属APP的APPKEY
     */
    public final TableField<SResourceRecord, String> APP_KEY = createField("APP_KEY", org.jooq.impl.SQLDataType.VARCHAR(128), this, "「appKey」- 所属APP的APPKEY");

    /**
     * The column <code>DB_ORIGIN_X.S_RESOURCE.LANGUAGE</code>. 「language」- 使用的语言
     */
    public final TableField<SResourceRecord, String> LANGUAGE = createField("LANGUAGE", org.jooq.impl.SQLDataType.VARCHAR(10), this, "「language」- 使用的语言");

    /**
     * The column <code>DB_ORIGIN_X.S_RESOURCE.ACTIVE</code>. 「active」- 是否启用
     */
    public final TableField<SResourceRecord, Boolean> ACTIVE = createField("ACTIVE", org.jooq.impl.SQLDataType.BIT, this, "「active」- 是否启用");

    /**
     * The column <code>DB_ORIGIN_X.S_RESOURCE.METADATA</code>. 「metadata」- 附加配置数据
     */
    public final TableField<SResourceRecord, String> METADATA = createField("METADATA", org.jooq.impl.SQLDataType.CLOB, this, "「metadata」- 附加配置数据");

    /**
     * Create a <code>DB_ORIGIN_X.S_RESOURCE</code> table reference
     */
    public SResource() {
        this(DSL.name("S_RESOURCE"), null);
    }

    /**
     * Create an aliased <code>DB_ORIGIN_X.S_RESOURCE</code> table reference
     */
    public SResource(String alias) {
        this(DSL.name(alias), S_RESOURCE);
    }

    /**
     * Create an aliased <code>DB_ORIGIN_X.S_RESOURCE</code> table reference
     */
    public SResource(Name alias) {
        this(alias, S_RESOURCE);
    }

    private SResource(Name alias, Table<SResourceRecord> aliased) {
        this(alias, aliased, null);
    }

    private SResource(Name alias, Table<SResourceRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DbOriginX.DB_ORIGIN_X;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.S_RESOURCE_API_KEY, Indexes.S_RESOURCE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<SResourceRecord> getPrimaryKey() {
        return Keys.KEY_S_RESOURCE_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<SResourceRecord>> getKeys() {
        return Arrays.<UniqueKey<SResourceRecord>>asList(Keys.KEY_S_RESOURCE_PRIMARY, Keys.KEY_S_RESOURCE_API_KEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SResource as(String alias) {
        return new SResource(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SResource as(Name alias) {
        return new SResource(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SResource rename(String name) {
        return new SResource(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SResource rename(Name name) {
        return new SResource(name, null);
    }
}
