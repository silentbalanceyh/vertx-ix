/*
 * This file is generated by jOOQ.
*/
package cn.vertxup.ix.domain.tables.daos;


import cn.vertxup.ix.domain.tables.SRelUserRole;
import cn.vertxup.ix.domain.tables.records.SRelUserRoleRecord;

import io.github.jklingsporn.vertx.jooq.future.VertxDAO;

import java.util.List;

import javax.annotation.Generated;

import org.jooq.Configuration;
import org.jooq.Record2;
import org.jooq.impl.DAOImpl;


import java.util.concurrent.CompletableFuture;
import io.github.jklingsporn.vertx.jooq.future.util.FutureTool;
/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.8"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SRelUserRoleDao extends DAOImpl<SRelUserRoleRecord, cn.vertxup.ix.domain.tables.pojos.SRelUserRole, Record2<String, String>> implements VertxDAO<cn.vertxup.ix.domain.tables.records.SRelUserRoleRecord,cn.vertxup.ix.domain.tables.pojos.SRelUserRole,org.jooq.Record2<java.lang.String, java.lang.String>> {

    /**
     * Create a new SRelUserRoleDao without any configuration
     */
    public SRelUserRoleDao() {
        super(SRelUserRole.S_REL_USER_ROLE, cn.vertxup.ix.domain.tables.pojos.SRelUserRole.class);
    }

    /**
     * Create a new SRelUserRoleDao with an attached configuration
     */
    public SRelUserRoleDao(Configuration configuration) {
        super(SRelUserRole.S_REL_USER_ROLE, cn.vertxup.ix.domain.tables.pojos.SRelUserRole.class, configuration);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected Record2<String, String> getId(cn.vertxup.ix.domain.tables.pojos.SRelUserRole object) {
        return compositeKeyRecord(object.getUserId(), object.getRoleId());
    }

    /**
     * Fetch records that have <code>USER_ID IN (values)</code>
     */
    public List<cn.vertxup.ix.domain.tables.pojos.SRelUserRole> fetchByUserId(String... values) {
        return fetch(SRelUserRole.S_REL_USER_ROLE.USER_ID, values);
    }

    /**
     * Fetch records that have <code>ROLE_ID IN (values)</code>
     */
    public List<cn.vertxup.ix.domain.tables.pojos.SRelUserRole> fetchByRoleId(String... values) {
        return fetch(SRelUserRole.S_REL_USER_ROLE.ROLE_ID, values);
    }

    /**
     * Fetch records that have <code>USER_ID IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.ix.domain.tables.pojos.SRelUserRole>> fetchByUserIdAsync(List<String> values) {
        return fetchAsync(SRelUserRole.S_REL_USER_ROLE.USER_ID,values);
    }

    /**
     * Fetch records that have <code>ROLE_ID IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.ix.domain.tables.pojos.SRelUserRole>> fetchByRoleIdAsync(List<String> values) {
        return fetchAsync(SRelUserRole.S_REL_USER_ROLE.ROLE_ID,values);
    }

    private io.vertx.core.Vertx vertx;

    @Override
    public void setVertx(io.vertx.core.Vertx vertx) {
        this.vertx = vertx;
    }

    @Override
    public io.vertx.core.Vertx vertx() {
        return this.vertx;
    }

}
